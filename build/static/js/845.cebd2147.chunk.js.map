{"version":3,"file":"static/js/845.cebd2147.chunk.js","mappings":"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","sources":["components/Card/Title.js","components/Card/CardImage.js","components/Card/ModelButtons.js","components/Card/DetailList.js","components/Card/BuyButtons.js","components/Card/Footer.js","components/Card/Card.js","components/Card/index.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { MainContext } from '../Context';\nimport { useSelector } from 'react-redux';\nimport { selectCard } from '../../store/getGoodDbSlice';\nimport { Title2 } from '../Styled/Titles';\n\nconst Title = () => {\n  const title = useSelector(selectCard).title;\n\n  const {\n    currentModel: { currentColor, currentMemory },\n  } = useContext(MainContext);\n\n  return (\n    <Title2>\n      {title} <br />\n      <span>\n        {currentMemory}Gb {currentColor}\n      </span>\n    </Title2>\n  );\n};\nexport default Title;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { selectPresent } from '../../store/getGoodDbSlice';\nimport { animated, useTransition, config } from 'react-spring';\nimport { MainContext } from '../Context';\n\nconst CardImg = styled.figure`\n  max-width: 300px;\n  margin: 0 70px 0 0;\n  display: grid;\n  @media (max-width: 968px) {\n    order: 1;\n    margin-right: 0;\n  }\n\n  & > img {\n    width: 230px;\n    max-width: none;\n    grid-area: 1/-1;\n  }\n`;\n\nconst AnimateImg = ({ img, text }) => {\n  const changeImg = useTransition(img, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n    config: config.slow,\n  });\n\n  return changeImg((props, item) => (\n    <animated.img src={item} alt={text} style={props} />\n  ));\n};\n\nconst CardImage = () => {\n  const {\n    currentModel: { currentImg },\n  } = useContext(MainContext);\n\n  const altText = useSelector(selectPresent).imgAlt;\n\n  return (\n    <CardImg>\n      <AnimateImg img={currentImg} text={altText} />\n    </CardImg>\n  );\n};\nexport default CardImage;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { MainContext } from '../Context';\nimport { selectCard } from '../../store/getGoodDbSlice';\nimport env from '../../env.json';\n\nconst { activeColor, mainColor } = env.colors;\n\nconst Buttons = styled.ul`\n  display: flex;\n  gap: 24px;\n  font-size: 18px;\n  font-weight: 600;\n  white-space: nowrap;\n\n  @media (max-width: 698px) {\n    flex-direction: column;\n    align-items: center;\n    gap: 15px;\n  }\n`;\nconst Button = styled.button`\n  background-color: transparent;\n  padding: 11px 16px;\n  color: ${mainColor};\n  border-bottom: 1px solid;\n  border-bottom-color: ${props =>\n    props.isActive ? activeColor : 'rgba(255,255,255,0)'};\n\n  :hover {\n    color: ${activeColor};\n  }\n`;\n\nconst ModelButtons = () => {\n  const { models } = useSelector(selectCard);\n\n  const {\n    currentModel: { currentColor, setCurrentModel },\n  } = useContext(MainContext);\n\n  const handleCurrentModel = model => setCurrentModel(models[model]);\n\n  const checkActive = model => model.color === currentColor;\n\n  return (\n    <Buttons>\n      {Object.entries(models).map(([id, data], index) => (\n        <li key={index}>\n          <Button\n            isActive={checkActive(data)}\n            className=\"active\"\n            onClick={() => handleCurrentModel(id)}>\n            {data.name}\n          </Button>\n        </li>\n      ))}\n    </Buttons>\n  );\n};\nexport default ModelButtons;\n","import React, { useContext } from 'react';\nimport { MainContext } from '../Context';\nimport { useSelector } from 'react-redux';\nimport { selectCard } from '../../store/getGoodDbSlice';\n\nconst DetailList = () => {\n  const details = useSelector(selectCard).details;\n  const {\n    currentModel: { currentMemory },\n  } = useContext(MainContext);\n\n  return (\n    <ul>\n      {Object.entries(details).map(([name, text]) => (\n        <li key={name} data-details={name}>\n          {text}\n          {name === 'memory' && `${currentMemory} Gb`}\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default DetailList;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { MainContext } from '../Context';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setMainGood } from '../../store/sendOrderSlice';\nimport { selectCard } from '../../store/getGoodDbSlice';\nimport { MainButton, BuyButton } from '../Styled/Buttons';\n\nconst BtnWrap = styled.div`\n  display: flex;\n  gap: 30px;\n\n  @media (max-width: 698px) {\n    flex-direction: column;\n  }\n`;\n\nconst BuyButtons = () => {\n  const dispatch = useDispatch();\n  const { title } = useSelector(selectCard);\n  const {\n    currentModel: { currentColor, currentMemory },\n    openModal: { onOpen },\n  } = useContext(MainContext);\n\n  const handleSetMainGood = needDelivery => {\n    const model = `${title}${currentMemory}GB ${currentColor}`;\n    dispatch(\n      setMainGood({\n        good: model,\n        delivery: needDelivery,\n      }),\n    );\n    onOpen();\n  };\n\n  return (\n    <BtnWrap>\n      <BuyButton onClick={() => handleSetMainGood(false)}>Buy Now</BuyButton>\n      <MainButton onClick={() => handleSetMainGood(true)}>\n        Buy with Delivery\n      </MainButton>\n    </BtnWrap>\n  );\n};\nexport default BuyButtons;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { MainContext } from '../Context';\nimport BuyButtons from './BuyButtons';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 40px;\n\n  @media (max-width: 698px) {\n    flex-wrap: wrap;\n    flex-direction: column;\n    gap: 30px;\n  }\n`;\nconst Price = styled.p`\n  min-width: 120px;\n  font-weight: 700;\n  font-size: 24px;\n\n  @media (max-width: 698px) {\n    align-self: baseline;\n  }\n`;\n\nconst Footer = () => {\n  const {\n    currentModel: { currentPrice },\n  } = useContext(MainContext);\n\n  return (\n    <Wrapper>\n      <Price>${currentPrice}</Price>\n      <BuyButtons />\n    </Wrapper>\n  );\n};\nexport default Footer;\n","import React, { useEffect, useContext, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { MainContext } from '../Context';\nimport { selectCard } from '../../store/getGoodDbSlice';\n\nimport Container from '../Styled/Container';\nimport Title from './Title';\nimport CardImage from './CardImage';\nimport ModelButtons from './ModelButtons';\nimport DetailList from './DetailList';\nimport Footer from './Footer';\n\nimport env from '../../env.json';\n\nconst {\n  colors: { activeColor, cardLinkColor },\n  transitionDuration,\n} = env;\n\nconst Wrapper = styled(Container)`\n  flex-direction: row;\n  justify-content: space-around;\n\n  @media (max-width: 968px) {\n    flex-direction: column;\n  }\n`;\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 3vw;\n`;\nconst Details = styled(CardContainer)`\n  align-items: center;\n  @media (max-width: 968px) {\n    max-width: 700px;\n  }\n  @media (max-width: 698px) {\n    max-width: 600px;\n  }\n`;\nconst Description = styled(CardContainer)`\n  font-weight: 300;\n  font-size: 18px;\n  line-height: 21px;\n  text-align: left;\n`;\nconst CardLink = styled(NavLink)`\n  display: block;\n  width: max-content;\n  color: ${cardLinkColor};\n  font-size: 18px;\n  line-height: 21px;\n  cursor: pointer;\n  transition: color ${transitionDuration};\n\n  &:hover,\n  &:active {\n    color: ${activeColor};\n  }\n`;\n\nconst Card = () => {\n  const { models } = useSelector(selectCard);\n  const {\n    currentModel: { setCurrentModel },\n  } = useContext(MainContext);\n\n  const startModel = useMemo(() => Object.entries(models)[0][1], [models]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => setCurrentModel(startModel), []);\n\n  return (\n    <Wrapper>\n      <CardImage />\n      <Details>\n        <Title />\n        <ModelButtons />\n        <Description>\n          <DetailList />\n          <CardLink to=\"/main/characteristics\">Full Specifications</CardLink>\n          <Footer />\n        </Description>\n      </Details>\n    </Wrapper>\n  );\n};\nexport default Card;\n","import Card from './Card';\n\nexport default Card;\n"],"names":["title","useSelector","selectCard","useContext","MainContext","currentModel","currentColor","currentMemory","CardImg","styled","AnimateImg","img","text","useTransition","from","opacity","enter","leave","config","changeImg","props","item","animated","src","alt","style","currentImg","altText","selectPresent","imgAlt","env","activeColor","mainColor","Buttons","Button","isActive","models","setCurrentModel","Object","entries","map","index","model","id","data","color","className","onClick","handleCurrentModel","name","details","BtnWrap","dispatch","useDispatch","onOpen","openModal","handleSetMainGood","needDelivery","setMainGood","good","delivery","Wrapper","Price","currentPrice","cardLinkColor","transitionDuration","Container","CardContainer","Details","Description","CardLink","NavLink","startModel","useMemo","useEffect","to"],"sourceRoot":""}